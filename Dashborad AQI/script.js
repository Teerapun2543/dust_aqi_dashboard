
  import { initializeApp } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-app.js";
  import { getDatabase, ref, onValue } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-database.js";
  import { get } from "https://www.gstatic.com/firebasejs/9.22.2/firebase-database.js";

  
  const firebaseConfig = {
    apiKey: "AIzaSyBVVhuktrqcs5rFNqVLDTvPAybwAJcF-Kc",
    authDomain: "air-quality-monitor-80a0c.firebaseapp.com",
    databaseURL: "https://air-quality-monitor-80a0c-default-rtdb.asia-southeast1.firebasedatabase.app",
    projectId: "air-quality-monitor-80a0c",
    storageBucket: "air-quality-monitor-80a0c.appspot.com",
    messagingSenderId: "625949588545",
    appId: "1:625949588545:web:479e4636bf048615e19ac0"
  };
  const app = initializeApp(firebaseConfig);
  const db = getDatabase(app);
  const dataRef = ref(db, 'iot_data');
  onValue(dataRef, (snapshot) => {
    const dataAll = snapshot.val();
    if (!dataAll) return;
  
    let latestData = null;
    let latestTime = 0;
  
    Object.values(dataAll).forEach((entry) => {
      const ts = new Date(entry.timestamp).getTime();
      if (!isNaN(ts) && ts > latestTime) {
        latestTime = ts;
        latestData = entry;
      }
    });
  
    if (!latestData) return;
  
    const pm25 = parseFloat(latestData.pm25);
    const pm10 = parseFloat(latestData.pm10);
    const temperature = parseFloat(latestData.temperature);
    const humidity = parseFloat(latestData.humidity);
    const pumpStatus = latestData.pump_status; 
    const updateTime = new Date(latestData.timestamp).toLocaleTimeString('th-TH', {
      hour: '2-digit',
      minute: '2-digit'
    });
    displayValue('last-updated', updateTime);
    displayValue('sensor-status', '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏õ‡∏Å‡∏ï‡∏¥');
    displayValue('aqi-pm', pm25); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï PM2.5 ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á AQI ‡∏î‡πâ‡∏ß‡∏¢
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Gauge
    pm25Gauge.refresh(pm25);
    pm10Gauge.refresh(pm10);
    tempGauge.refresh(temperature);
    humidityGauge.refresh(humidity);
  
    // Update AQI and other data as needed
    const aqi = getAQILevelAndColor(pm25);
    displayValue('aqi-value', aqi.aqi);
    displayValue('aqi-level', aqi.level);
    document.getElementById('emoji-img').src = aqi.emojiImg;
    displayValue('pump-status', pumpStatus);
    document.getElementById('aqi-card').style.backgroundColor = aqi.bgColor;

  });
  function displayValue(id, value, unit = '') {
  const el = document.getElementById(id);
  if (el) el.innerText = value !== undefined ? value + unit : '--';

  // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏∑‡∏≠ temp/humidity ‡πÅ‡∏•‡∏∞‡∏°‡∏µ mini ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏î‡πâ‡∏ß‡∏¢
  if (id === 'temp-value' && document.getElementById('temp-value-mini')) {
    document.getElementById('temp-value-mini').innerText = value !== undefined ? value : '--';
  }
  if (id === 'humidity-value' && document.getElementById('humidity-value-mini')) {
    document.getElementById('humidity-value-mini').innerText = value !== undefined ? value : '--';
  }
}
function getAQILevelAndColor(pm25) {
  const val = parseFloat(pm25);
  if (val <= 25) return {
    aqi: 15,
    level: '‡∏î‡∏µ‡∏°‡∏≤‡∏Å',
    color: '#3f87ff',
    bgColor: '#e6f0ff',
    emojiImg: 'images/excellent.png'
  };
  if (val <= 37) return {
    aqi: 40,
    level: '‡∏î‡∏µ',
    color: '#28a745',
    bgColor: '#e9f7ec',
    emojiImg: 'images/good.png'
  };
  if (val <= 50) return {
    aqi: 75,
    level: '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
    color: '#ffc107',
    bgColor: '#fff9db',
    emojiImg: 'images/neutral.png'
  };
  if (val <= 90) return {
    aqi: 150,
    level: '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û',
    color: '#fd7e14',
    bgColor: '#ffe5cc',
    emojiImg: 'images/mask.png'
  };
  return {
    aqi: 250,
    level: '‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢',
    color: '#dc3545',
    bgColor: '#ffe6e6',
    emojiImg: 'images/danger.png'
  };
}
  function getPM25Background(value) {
    if (value <= 25) return '#cce5ff';
    if (value <= 37) return '#d4edda';
    if (value <= 50) return '#fff3cd';
    if (value <= 90) return '#ffe5b4';
    return '#f8d7da';
  }
  function getPM10Background(value) {
    if (value <= 50) return '#cce5ff';
    if (value <= 80) return '#d4edda';
    if (value <= 120) return '#fff3cd';
    if (value <= 180) return '#ffe5b4';
    return '#f8d7da';
  }
  // ----- ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏£‡∏≤‡∏ü‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á -----
  let historyChart;
  let selectedDateStr = null;
  let selectedHours = 24;

  function createChart(labels, pm25Data, pm10Data) {
    const ctx = document.getElementById('historyChart').getContext('2d');
    if (historyChart) historyChart.destroy();
  
    historyChart = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: labels,
        datasets: [
          {
            label: 'PM2.5 (¬µg/m¬≥)',
            data: pm25Data,
            backgroundColor: 'rgba(255, 99, 132, 0.7)'
          },
          {
            label: 'PM10 (¬µg/m¬≥)',
            data: pm10Data,
            backgroundColor: 'rgba(54, 162, 235, 0.7)'
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: {
            title: { display: true, text: '‡πÄ‡∏ß‡∏•‡∏≤' },
            ticks: {
              autoSkip: true,
              maxTicksLimit: 24
            }
          },
          y: {
            title: { display: true, text: '¬µg/m¬≥' },
            beginAtZero: true
          }
        },
        plugins: {
          legend: {
            position: 'top'
          }
        }
      }
    });
  }
  function safeParseTimestamp(rawTimestamp) {
    if (!rawTimestamp || typeof rawTimestamp !== 'string') {
      return new Date(NaN);
    }
    return new Date(rawTimestamp.replace(' ', 'T'));
  }
  function loadHistoryData(hours = 24) {
    const now = Date.now();
    const startTime = now - hours * 60 * 60 * 1000;
  
    get(dataRef).then(snapshot => {
      const rawData = snapshot.val();
      const grouped = {}; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  
      Object.values(rawData).forEach(entry => {
        const ts = safeParseTimestamp(entry.timestamp);
        const time = ts.getTime();
        if (!isNaN(time) && time >= startTime && time <= now) {
          const hourLabel = ts.getHours().toString().padStart(2, '0') + ':00';
          if (!grouped[hourLabel]) grouped[hourLabel] = { pm25: [], pm10: [] };
          grouped[hourLabel].pm25.push(parseFloat(entry.pm25));
          grouped[hourLabel].pm10.push(parseFloat(entry.pm10));
        }
      });
  
      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° label ‡πÅ‡∏•‡∏∞‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const labels = [];
      const pm25Data = [];
      const pm10Data = [];
  
      for (let i = hours - 1; i >= 0; i--) {
        const hour = new Date(now - i * 60 * 60 * 1000);
        const hourStr = hour.getHours().toString().padStart(2, '0') + ':00';
      
        labels.push(hourStr.replace(':', '.')); // ‡πÉ‡∏ä‡πâ '13.00' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á
      
        const group = grouped[hourStr]; // ‡πÉ‡∏ä‡πâ '13:00' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô group
      
        if (group) {
          const avg = arr => arr.reduce((sum, v) => sum + v, 0) / arr.length;
          pm25Data.push(Number(avg(group.pm25).toFixed(1)));
          pm10Data.push(Number(avg(group.pm10).toFixed(1)));
        } else {
          pm25Data.push(null);
          pm10Data.push(null);
        }
      }
      
  
      createChart(labels, pm25Data, pm10Data);
    });
  }
  function loadHistoryDataForDate(dateStr, hours = 24) {
    const now = new Date(`${dateStr}T23:59:59`).getTime();
    const startTime = now - hours * 60 * 60 * 1000;
  
    const chartContainer = document.getElementById('historyChart');
    chartContainer.classList.add('loading');
  
    get(dataRef).then(snapshot => {
      const rawData = snapshot.val();
      const grouped = {};
  
      Object.values(rawData).forEach(entry => {
        const ts = safeParseTimestamp(entry.timestamp);
        const time = ts.getTime();
        if (!isNaN(time) && time >= startTime && time <= now) {
          const hourKey = ts.getHours().toString().padStart(2, '0') + ':00';
          if (!grouped[hourKey]) grouped[hourKey] = { pm25: [], pm10: [] };
          grouped[hourKey].pm25.push(parseFloat(entry.pm25));
          grouped[hourKey].pm10.push(parseFloat(entry.pm10));
        }
      });
  
      const labels = [];
      const pm25Data = [];
      const pm10Data = [];
  
      for (let i = hours - 1; i >= 0; i--) {
        const hour = new Date(now - i * 60 * 60 * 1000);
        const hourKey = hour.getHours().toString().padStart(2, '0') + ':00';
        const label = hourKey.replace(':', '.');
        labels.push(label);
  
        const group = grouped[hourKey];
        if (group) {
          const avg = arr => arr.reduce((sum, v) => sum + v, 0) / arr.length;
          pm25Data.push(Number(avg(group.pm25).toFixed(1)));
          pm10Data.push(Number(avg(group.pm10).toFixed(1)));
        } else {
          pm25Data.push(null);
          pm10Data.push(null);
        }
      }
  
      if (pm25Data.every(v => v === null)) {
        alert("üìâ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å");
      }
  
      createChart(labels, pm25Data, pm10Data);
      chartContainer.classList.remove('loading');
    });
  }
  window.addEventListener('load', () => {
    loadHistoryData(24);
  });
  document.querySelectorAll('.chart button').forEach(btn => {
    btn.addEventListener('click', () => {
      const txt = btn.innerText;
  
      if (txt.includes('1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á')) selectedHours = 1;
      else if (txt.includes('6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á')) selectedHours = 6;
      else if (txt.includes('24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á')) selectedHours = 24;
      else if (txt.includes('7 ‡∏ß‡∏±‡∏ô')) selectedHours = 24 * 7;
  
      // ‡πÇ‡∏´‡∏•‡∏î‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      if (selectedDateStr) {
        loadHistoryDataForDate(selectedDateStr, selectedHours);
      } else {
        loadHistoryData(selectedHours);
      }
  
      // UI: Active button
      document.querySelectorAll('.chart button').forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
    });
  });
  
  // üìÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏£‡∏≤‡∏ü
  document.getElementById('datePicker').addEventListener('change', (e) => {
    selectedDateStr = e.target.value;
    if (!selectedDateStr) return;
  
    loadHistoryDataForDate(selectedDateStr, selectedHours);
  
    // UI: ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏° active ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    document.querySelectorAll('.chart button').forEach(btn => {
      btn.classList.remove('active');
      if (btn.innerText.includes(selectedHours)) btn.classList.add('active');
    });
  });
  
// üì• ‡πÄ‡∏°‡∏ô‡∏π‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV/Excel
function handleDownload(type) {
  if (!historyChart) return alert("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î");

  const labels = historyChart.data.labels;
  const pm25Data = historyChart.data.datasets[0].data;
  const pm10Data = historyChart.data.datasets[1].data;

  if (type === 'csv') {
    let csv = "‡πÄ‡∏ß‡∏•‡∏≤,PM2.5,PM10\n";
    for (let i = 0; i < labels.length; i++) {
      csv += `${labels[i]},${pm25Data[i] ?? ""},${pm10Data[i] ?? ""}\n`;
    }

    const BOM = "\uFEFF";
    const blob = new Blob([BOM + csv], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `aqi_data_${selectedDateStr || 'today'}_${selectedHours}h.csv`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }

  if (type === 'pdf') {
    const { jsPDF } = window.jspdf;
    const pdf = new jsPDF('p', 'mm', 'a4');
    const margin = 10;
    let y = 15;
  
    const chartEl = document.getElementById('historyChart');

pdf.setFont("THSarabunNew", "normal"); // ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢
pdf.setFontSize(20);
pdf.text("‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®", 105, y, { align: "center" });

pdf.setFontSize(14);
pdf.text(`‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏ó‡∏≥: ${dateStr}`, margin, y += 10);
pdf.text(`‡πÄ‡∏ß‡∏•‡∏≤: ${timeStr}`, margin, y += 7);
pdf.text(`‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏£‡∏µ‡∏ï XYZ`, margin, y += 7);

pdf.setDrawColor(0); // ‡πÄ‡∏™‡πâ‡∏ô‡πÉ‡∏ï‡πâ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
pdf.line(margin, y += 4, 200 - margin, y);

pdf.setFontSize(16);
pdf.text("1. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", margin, y += 10);
pdf.setFontSize(12);
pdf.text(`- ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ PM2.5: ${avgPM25}`, margin, y += 6);
pdf.text(`- ‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: ${maxPM25}`, margin, y += 6);

  
    // ‚úÖ ‡∏à‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Section ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
    html2canvas(chartEl).then(canvas => {
      const imgData = canvas.toDataURL('image/png');
      const pageWidth = pdf.internal.pageSize.getWidth();
      const imgWidth = pageWidth - margin * 2;
      const imgHeight = imgWidth * (canvas.height / canvas.width);
  
      // ‚úÖ ‡πÅ‡∏ó‡∏£‡∏Å‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏≤‡∏ü
      pdf.addImage(imgData, 'PNG', margin, y, imgWidth, imgHeight);
      pdf.save(`air_quality_${selectedDateStr || 'today'}_${selectedHours}h.pdf`);
    });
  }
  

  document.getElementById("downloadSelect").value = "";
}
// üì• ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô handleDownload
document.getElementById('downloadSelect').addEventListener('change', function () {
  const fileType = this.value;
  if (fileType === 'pdf') {
    downloadEngineeringPDFReport(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà
  } else if (fileType === 'csv') {
    handleDownloadCSV();
  }
  this.value = ''; // reset select
});

window.openHistoryModal = function () {
  document.getElementById('historyModal').style.display = 'block';
  const today = new Date().toISOString().split("T")[0];
  document.getElementById('modalDatePicker').value = today;
  loadHistoryTable(today);
};
document.getElementById('modalDatePicker').addEventListener('change', function () {
  loadHistoryTable(this.value);
});
function loadHistoryTable(dateStr) {
  if (!dateStr) return;
  const selectedDate = new Date(dateStr);
  const start = new Date(selectedDate.setHours(0, 0, 0, 0)).getTime();
  const end = new Date(selectedDate.setHours(23, 59, 59, 999)).getTime();

  get(dataRef).then(snapshot => {
    const data = snapshot.val();
    const tbody = document.getElementById('historyTableBody');
    tbody.innerHTML = "";

    const rows = [];

    Object.values(data).forEach(entry => {
      const ts = new Date(entry.timestamp).getTime();
      if (ts >= start && ts <= end) {
        rows.push(`
          <tr>
            <td>${new Date(ts).toLocaleTimeString('th-TH')}</td>
            <td>${entry.pm25 ?? '--'}</td>
            <td>${entry.pm10 ?? '--'}</td>
            <td>${entry.temperature ?? 'undefined'}</td>
            <td>${entry.humidity ?? 'undefined'}</td>
            <td>${entry.pump_status ?? '--'}</td>
            <td>${getAQILevel(entry.pm25)}</td>
          </tr>
        `);
      }
    });

    tbody.innerHTML = rows.length > 0 ? rows.join("") : `<tr><td colspan="7">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</td></tr>`;
  });
}
function getAQILevel(pm25) {
  const val = parseFloat(pm25);
  if (val <= 25) return '‡∏î‡∏µ‡∏°‡∏≤‡∏Å';
  if (val <= 37) return '‡∏î‡∏µ';
  if (val <= 50) return '‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á';
  if (val <= 90) return '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏°‡∏µ‡∏ú‡∏•';
  return '‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢';
}
// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ Gauge ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡πà‡∏≤
var pm25Gauge = new JustGage({
  id: "gauge-pm25", // ‡∏£‡∏∞‡∏ö‡∏∏ id ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ô‡∏≥‡∏°‡∏≤‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ö HTML
  value: 0, // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  min: 0, // ‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î
  max: 100, // ‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
  title: "PM2.5 (¬µg/m¬≥)",
  label: "¬µg/m¬≥"
});
var pm10Gauge = new JustGage({
  id: "gauge-pm10", 
  value: 0,
  min: 0,
  max: 200,
  title: "PM10 (¬µg/m¬≥)",
  label: "¬µg/m¬≥"
});
var tempGauge = new JustGage({
  id: "gauge-temp", 
  value: 0,
  min: -10,
  max: 50,
  title: "Temperature (¬∞C)",
  label: "¬∞C"
});
var humidityGauge = new JustGage({
  id: "gauge-humidity", 
  value: 0,
  min: 0,
  max: 100,
  title: "Humidity (%)",
  label: "%"
});
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firebase
function fetchLatestData() {
  const db = getDatabase(); // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å modular SDK
  const dataRef = ref(db, 'iot_data');

  get(dataRef).then(snapshot => {
    const data = snapshot.val();
    const tableBody = document.getElementById('table-body');
    tableBody.innerHTML = '';

    if (!data) {
      tableBody.innerHTML = '<tr><td colspan="6">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</td></tr>';
      return;
    }

    // üîÑ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 5 ‡∏≠‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    const recentData = Object.values(data)
      .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp)) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤ (‡πÉ‡∏´‡∏°‡πà -> ‡πÄ‡∏Å‡πà‡∏≤)
      .slice(0, 4); // ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà 5 ‡πÅ‡∏ñ‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

    recentData.forEach(entry => {
      const row = document.createElement('tr');
      row.innerHTML = `
        <td>${new Date(entry.timestamp).toLocaleTimeString('th-TH')}</td>
        <td>${entry.pm25 || '--'}</td>
        <td>${entry.pm10 || '--'}</td>
        <td>${entry.temperature || '--'}</td>
        <td>${entry.humidity || '--'}</td>
        <td>${entry.pump_status || '--'}</td>
      `;
      tableBody.appendChild(row);
    });
  });
}
function loadSummaryStats() {
  const now = Date.now();
  const startTime = now - 24 * 60 * 60 * 1000; // 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á

  get(dataRef).then(snapshot => {
    const data = snapshot.val();
    const values = Object.values(data).filter(entry => {
      const ts = new Date(entry.timestamp).getTime();
      return ts >= startTime;
    });

    if (values.length === 0) return;

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const pm25Values = values.map(v => parseFloat(v.pm25)).filter(Number.isFinite);
    const pm10Values = values.map(v => parseFloat(v.pm10)).filter(Number.isFinite);
    const tempValues = values.map(v => parseFloat(v.temperature)).filter(Number.isFinite);
    const humidityValues = values.map(v => parseFloat(v.humidity)).filter(Number.isFinite);

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
    const avg = arr => (arr.reduce((sum, v) => sum + v, 0) / arr.length).toFixed(0);

    // ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ß‡∏•‡∏≤
    const getMaxWithTime = (arr, field) => {
      const maxEntry = arr.reduce((max, cur) =>
        parseFloat(cur[field]) > parseFloat(max[field]) ? cur : max, arr[0]);
      return {
        value: parseFloat(maxEntry[field]),
        time: new Date(maxEntry.timestamp).toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })
      };
    };

    const getMinWithTime = (arr, field) => {
      const minEntry = arr.reduce((min, cur) =>
        parseFloat(cur[field]) < parseFloat(min[field]) ? cur : min, arr[0]);
      return {
        value: parseFloat(minEntry[field]),
        time: new Date(minEntry.timestamp).toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' })
      };
    };

    const pm25Max = getMaxWithTime(values, 'pm25');
    const pm25Min = getMinWithTime(values, 'pm25');

    // ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô DOM
    document.getElementById('avg-pm25').innerText = avg(pm25Values);
    document.getElementById('avg-pm10').innerText = avg(pm10Values);
    document.getElementById('avg-temp').innerText = avg(tempValues);
    document.getElementById('avg-humidity').innerText = avg(humidityValues);
    document.getElementById('max-pm25').innerHTML = `${pm25Max.value} ¬µg/m¬≥<br><small>(${pm25Max.time} ‡∏ô.)</small>`;
    document.getElementById('min-pm25').innerHTML = `${pm25Min.value} ¬µg/m¬≥<br><small>(${pm25Min.time} ‡∏ô.)</small>`;
  });
}
function countExceedances() {
  const now = Date.now();
  const startTime = now - 24 * 60 * 60 * 1000; // 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á

  get(dataRef).then(snapshot => {
    const data = snapshot.val();
    if (!data) return;

    let countPM25 = 0;
    let countPM10 = 0;

    Object.values(data).forEach(entry => {
      const ts = new Date(entry.timestamp).getTime();
      if (ts >= startTime) {
        if (parseFloat(entry.pm25) > 50) countPM25++;
        if (parseFloat(entry.pm10) > 120) countPM10++;
      }
    });

    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    document.getElementById('exceed-pm25').innerText = countPM25;
    document.getElementById('exceed-pm10').innerText = countPM10;
  });
}

function downloadEngineeringPDFReport() {
  const { jsPDF } = window.jspdf;
  const pdf = new jsPDF("p", "mm", "a4");
  const margin = 15;
  let y = margin;

  const now = new Date();
  const dateStr = now.toLocaleDateString('th-TH');
  const timeStr = now.toLocaleTimeString('th-TH');

  pdf.setFont("helvetica");
  pdf.setFontSize(18);
  pdf.text("‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® (Engineering Report)", 105, y, { align: "center" });
  y += 10;

  pdf.setFontSize(12);
  pdf.text(`‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${dateStr}   ‡πÄ‡∏ß‡∏•‡∏≤: ${timeStr}`, margin, y); y += 8;
  pdf.text(`‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î: ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏£‡∏µ‡∏ï XYZ`, margin, y); y += 10;

  // üîπ Summary
  pdf.setFontSize(14);
  pdf.text("1. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ (Summary)", margin, y); y += 8;

  const avgPM25 = document.getElementById('avg-pm25').innerText || "--";
  const avgPM10 = document.getElementById('avg-pm10').innerText || "--";
  const avgTemp = document.getElementById('avg-temp').innerText || "--";
  const avgHumidity = document.getElementById('avg-humidity').innerText || "--";
  const maxPM25 = document.getElementById('max-pm25').innerText.replace(/<[^>]*>/g, '') || "--";
  const minPM25 = document.getElementById('min-pm25').innerText.replace(/<[^>]*>/g, '') || "--";

  pdf.setFontSize(12);
  pdf.text(`- ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ PM2.5: ${avgPM25} ¬µg/m¬≥`, margin, y); y += 6;
  pdf.text(`- ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ PM10: ${avgPM10} ¬µg/m¬≥`, margin, y); y += 6;
  pdf.text(`- ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: ${avgTemp} ¬∞C`, margin, y); y += 6;
  pdf.text(`- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: ${avgHumidity} %`, margin, y); y += 6;
  pdf.text(`- PM2.5 ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: ${maxPM25}`, margin, y); y += 6;
  pdf.text(`- PM2.5 ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î: ${minPM25}`, margin, y); y += 10;

  // üîπ ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°
  pdf.setFontSize(14);
  pdf.text("2. ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®", margin, y); y += 5;

  html2canvas(document.getElementById("historyChart")).then(canvas => {
    const imgData = canvas.toDataURL("image/png");
    const imgWidth = 180;
    const imgHeight = (canvas.height * imgWidth) / canvas.width;

    pdf.addImage(imgData, "PNG", margin, y, imgWidth, imgHeight);
    y += imgHeight + 10;

    // üîπ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ / ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞
    pdf.setFontSize(14);
    pdf.text("3. ‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô", margin, y); y += 8;
    pdf.setFontSize(12);
    pdf.text("- ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ PM2.5 ‡πÄ‡∏Å‡∏¥‡∏ô 50 ¬µg/m¬≥", margin, y); y += 6;
    pdf.text("- ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ä‡πà‡∏ß‡∏á‡∏ö‡πà‡∏≤‡∏¢", margin, y); y += 6;
    pdf.text("- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏à‡∏∏‡∏î‡∏≠‡∏±‡∏ö‡∏•‡∏°", margin, y); y += 10;

    // üîö ‡∏õ‡∏¥‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    pdf.setFontSize(12);
    pdf.text("‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏±‡∏î‡∏ó‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢", margin, y);

    // üì• Save PDF
    pdf.save(`Air_Quality_Report_${dateStr}.pdf`);
  });
}

// ‚úÖ ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å HTML
window.downloadEngineeringPDFReport = downloadEngineeringPDFReport;


// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡πÜ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
setInterval(fetchLatestData, 5000);
// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î
window.onload = fetchLatestData;
loadSummaryStats();
countExceedances();
